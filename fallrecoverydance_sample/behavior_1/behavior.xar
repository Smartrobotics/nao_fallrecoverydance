<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る。" id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="Ganbaru Dance" id="3" localization="8" tooltip="" x="468" y="45">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="prepare" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="start" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                            <Input name="pause" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="5" />
                            <Input name="robotHasFallen" type="0" type_size="1" nature="4" stm_value_name="robotHasFallen" inner="1" tooltip="robotHasFallen desc" id="6" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る。" id="7" />
                            <Parameter name="File name" inherits_from_parent="0" content_type="4" value="/../swiftswords_ext.mp3" default_value="" tooltip="" id="8" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Timeline" id="1" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="433" y="87">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bIsRunning = False
        self.player = ALProxy('ALAudioPlayer')
        self.playerStop = ALProxy('ALAudioPlayer', True) #Create another proxy as wait is blocking if audioout is remote
        self.soundId = None

    def onUnload(self):
        if self.soundId != None:
            self.playerStop.stop(self.soundId)
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onPrepare(self,p):
        self.soundFile = p

        # put animation code here
        names = list()
        times = list()
        keys = list()

        names.append("HeadPitch")
        times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        keys.append([[0, [3, -1, 0], [3, 0.666667, 0]], [8.95233e-08, [3, -0.666667, 0], [3, 0.666667, 0]], [-4.76838e-07, [3, -0.666667, 0], [3, 0.666667, 0]], [8.89455e-08, [3, -0.666667, -1.60302e-08], [3, 0.666667, 1.60302e-08]], [1.04976e-07, [3, -0.666667, -1.60302e-08], [3, 0.666667, 1.60302e-08]], [0.331613, [3, -0.666667, 0], [3, 0.666667, 0]], [0.314159, [3, -0.666667, 0.0174533], [3, 0.666667, -0.0174533]], [9.19019e-08, [3, -0.666667, 0.107629], [3, 0.666667, -0.107629]], [-0.331613, [3, -0.666667, 0], [3, 0.666667, 0]], [0.139626, [3, -0.666667, 0], [3, 0.866667, 0]], [-0.0872665, [3, -0.866667, 0], [3, 0.866667, 0]], [0.139626, [3, -0.866667, -0.0850848], [3, 0.733333, 0.0719948]], [0.383972, [3, -0.733333, -0.0731376], [3, 0.666667, 0.0664887]], [0.558505, [3, -0.666667, 0], [3, 0.666667, 0]], [0.383972, [3, -0.666667, 0.148353], [3, 0.666667, -0.148353]], [-0.331613, [3, -0.666667, 0], [3, 0.866667, 0]], [0.139626, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.0872665, [3, -0.866667, 0], [3, 0.866667, 0]], [0.139626, [3, -0.866667, -0.0850848], [3, 0.733333, 0.0719948]], [0.383972, [3, -0.733333, 0], [3, 0.6, 0]], [0, [3, -0.6, 0.0615247], [3, 1.26667, -0.129886]], [-0.190258, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("HeadYaw")
        times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        keys.append([[0, [3, -1, 0], [3, 0.666667, 0]], [8.42936e-08, [3, -0.666667, -1.7461e-13], [3, 0.666667, 1.7461e-13]], [8.42938e-08, [3, -0.666667, 0], [3, 0.666667, 0]], [8.42938e-08, [3, -0.666667, 0], [3, 0.666667, 0]], [-4.76838e-07, [3, -0.666667, 0], [3, 0.666667, 0]], [0.314159, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.296706, [3, -0.666667, 0.250164], [3, 0.666667, -0.250164]], [-1.18682, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.279253, [3, -0.666667, -0.232711], [3, 0.666667, 0.232711]], [0.20944, [3, -0.666667, -0.268123], [3, 0.866667, 0.34856]], [1.5708, [3, -0.866667, 0], [3, 0.866667, 0]], [0.20944, [3, -0.866667, 0.0825065], [3, 0.733333, -0.0698132]], [0.139626, [3, -0.733333, 0.0365688], [3, 0.666667, -0.0332444]], [0, [3, -0.666667, 0.0465421], [3, 0.666667, -0.0465421]], [-0.139626, [3, -0.666667, 0], [3, 0.666667, 0]], [0.279253, [3, -0.666667, 0], [3, 0.866667, 0]], [-0.20944, [3, -0.866667, 0.308341], [3, 0.866667, -0.308341]], [-1.5708, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.20944, [3, -0.866667, -0.0825065], [3, 0.733333, 0.0698132]], [-0.139626, [3, -0.733333, -0.0383972], [3, 0.6, 0.0314159]], [0, [3, -0.6, 0], [3, 1.26667, 0]], [-0.00310993, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("LAnklePitch")
        times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 43.4, 44.4, 46.2, 50])
        keys.append([[1.00403e-07, [3, -1, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 1.00403e-07], [3, 0.666667, -1.00403e-07]], [-0.303687, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.647517, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.610865, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.0472, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.0472, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.0472, [3, -0.666667, 0], [3, 0.866667, 0]], [-1.0472, [3, -0.866667, 0], [3, 0.866667, 0]], [-1.0472, [3, -0.866667, 0], [3, 0.733333, 0]], [-1.0472, [3, -0.733333, 0], [3, 0.666667, 0]], [-0.872665, [3, -0.666667, -0.0509054], [3, 0.666667, 0.0509054]], [-0.741765, [3, -0.666667, -0.1309], [3, 0.666667, 0.1309]], [0, [3, -0.666667, -7.72328e-08], [3, 0.866667, 1.00403e-07]], [1.00403e-07, [3, -0.866667, -1.00403e-07], [3, 0.866667, 1.00403e-07]], [0.523599, [3, -0.866667, 0], [3, 0.866667, 0]], [1.00403e-07, [3, -0.866667, 0.246], [3, 0.4, -0.113538]], [-0.555015, [3, -0.4, 0.119], [3, 0.333333, -0.0991665]], [-0.654498, [3, -0.333333, 0.0585932], [3, 0.6, -0.105468]], [-1.0472, [3, -0.6, 0], [3, 1.26667, 0]], [0.033706, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("LAnkleRoll")
        times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 33.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        keys.append([[0.0523599, [3, -1, 0], [3, 0.666667, 0]], [0.122173, [3, -0.666667, -0.0203622], [3, 0.666667, 0.0203622]], [0.174533, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.10472, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.10472, [3, -0.666667, 0], [3, 0.666667, 0]], [0.174533, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.261799, [3, -0.666667, 0], [3, 0.666667, 0]], [0.0628318, [3, -0.666667, -0.0654498], [3, 0.666667, 0.0654498]], [0.1309, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.733333, 0]], [0.0872665, [3, -0.733333, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0.054687], [3, 0.666667, -0.054687]], [-0.240855, [3, -0.666667, 0.123724], [3, 0.333333, -0.0618622]], [-0.55676, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.424115, [3, -0.333333, -0.0192309], [3, 0.866667, 0.0500005]], [-0.349066, [3, -0.866667, -0.0706858], [3, 0.866667, 0.0706858]], [0, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.349066, [3, -0.866667, 0], [3, 0.733333, 0]], [-0.312414, [3, -0.733333, -0.0366519], [3, 0.6, 0.0299879]], [0, [3, -0.6, 0], [3, 1.26667, 0]], [-0.05058, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("LElbowRoll")
        times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 45.4, 46.2, 50])
        keys.append([[0, [3, -1, 0], [3, 0.666667, 0]], [-0.698132, [3, -0.666667, 0.174533], [3, 0.666667, -0.174533]], [-1.0472, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.65806, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.959931, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.48353, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.01229, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.01229, [3, -0.666667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]], [-1.01229, [3, -0.866667, 0], [3, 0.733333, 0]], [-1.01229, [3, -0.733333, 0], [3, 0.666667, 0]], [-0.890118, [3, -0.666667, -0.0261799], [3, 0.666667, 0.0261799]], [-0.855211, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.11701, [3, -0.666667, 0], [3, 0.866667, 0]], [-0.855211, [3, -0.866667, 0], [3, 0.866667, 0]], [-1.25664, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.855211, [3, -0.866667, 0], [3, 0.733333, 0]], [-0.855211, [3, -0.733333, 0], [3, 0.333333, 0]], [-0.994838, [3, -0.333333, 0.10472], [3, 0.266667, -0.0837758]], [-1.4207, [3, -0.266667, 0], [3, 1.26667, 0]], [-0.38806, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("LElbowYaw")
        times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 45.4, 46.2, 50])
        keys.append([[-1.5708, [3, -1, 0], [3, 0.666667, 0]], [-1.5708, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.5708, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.5708, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.5708, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.383972, [3, -0.666667, -0.261799], [3, 0.666667, 0.261799]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.733333, 0]], [0, [3, -0.733333, 0], [3, 0.666667, 0]], [0.20944, [3, -0.666667, 0], [3, 0.666667, 0]], [0.191986, [3, -0.666667, 0.0174533], [3, 0.666667, -0.0174533]], [-0.418879, [3, -0.666667, 0], [3, 0.866667, 0]], [-0.418879, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.0872665, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.418879, [3, -0.866667, 0], [3, 0.733333, 0]], [0.191986, [3, -0.733333, 0], [3, 0.333333, 0]], [-0.378736, [3, -0.333333, 0], [3, 0.266667, 0]], [-0.244346, [3, -0.266667, 0], [3, 1.26667, 0]], [-1.18276, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("LHand")
        times.append([3, 50])
        keys.append([[0, [3, -1, 0], [3, 15.6667, 0]], [0.2984, [3, -15.6667, 0], [3, 0, 0]]])

        names.append("LHipPitch")
        times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        keys.append([[0, [3, -1, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.349066, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.698132, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.610865, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.0472, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.0472, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.0472, [3, -0.666667, 0], [3, 0.866667, 0]], [-1.0472, [3, -0.866667, 0], [3, 0.866667, 0]], [-1.0472, [3, -0.866667, 0], [3, 0.733333, 0]], [-1.0472, [3, -0.733333, 0], [3, 0.666667, 0]], [-0.872665, [3, -0.666667, -0.0509054], [3, 0.666667, 0.0509054]], [-0.741765, [3, -0.666667, -0.125082], [3, 0.666667, 0.125082]], [-0.122173, [3, -0.666667, 0], [3, 0.866667, 0]], [-0.872665, [3, -0.866667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.872665, [3, -0.866667, 0], [3, 0.733333, 0]], [-0.654498, [3, -0.733333, 0], [3, 0.6, 0]], [-1.0472, [3, -0.6, 0], [3, 1.26667, 0]], [0.216335, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("LHipRoll")
        times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 33.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        keys.append([[-0.0523599, [3, -1, 0], [3, 0.666667, 0]], [-0.122173, [3, -0.666667, 0.0203622], [3, 0.666667, -0.0203622]], [-0.174533, [3, -0.666667, 0], [3, 0.666667, 0]], [0.10472, [3, -0.666667, 0], [3, 0.666667, 0]], [0.10472, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.174533, [3, -0.666667, 0], [3, 0.666667, 0]], [0.174533, [3, -0.666667, -0.0991929], [3, 0.666667, 0.0991929]], [0.420624, [3, -0.666667, -0.0590503], [3, 0.666667, 0.0590503]], [0.528835, [3, -0.666667, -0.0317068], [3, 0.666667, 0.0317068]], [0.610865, [3, -0.666667, 0], [3, 0.866667, 0]], [0.610865, [3, -0.866667, 0], [3, 0.866667, 0]], [0.610865, [3, -0.866667, 0], [3, 0.733333, 0]], [0.349066, [3, -0.733333, 0.106659], [3, 0.666667, -0.0969627]], [0, [3, -0.666667, 0.101811], [3, 0.666667, -0.101811]], [-0.261799, [3, -0.666667, 0], [3, 0.333333, 0]], [0.251327, [3, -0.333333, -0.010472], [3, 0.333333, 0.010472]], [0.261799, [3, -0.333333, 0], [3, 0.866667, 0]], [0.139626, [3, -0.866667, 0], [3, 0.866667, 0]], [0.698132, [3, -0.866667, 0], [3, 0.866667, 0]], [0.139626, [3, -0.866667, 0.173321], [3, 0.733333, -0.146656]], [-0.261799, [3, -0.733333, 0], [3, 0.6, 0]], [0, [3, -0.6, -0.019639], [3, 1.26667, 0.0414601]], [0.0414601, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("LHipYawPitch")
        times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        keys.append([[-0.10821, [3, -1, 0], [3, 0.666667, 0]], [-0.120428, [3, -0.666667, 0.00378155], [3, 0.666667, -0.00378155]], [-0.1309, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.120428, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.143117, [3, -0.666667, 0.00785398], [3, 0.666667, -0.00785398]], [-0.167552, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.0994838, [3, -0.666667, -0.0279253], [3, 0.666667, 0.0279253]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.733333, 0]], [0, [3, -0.733333, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.733333, 0]], [-0.0680678, [3, -0.733333, 0], [3, 0.6, 0]], [0, [3, -0.6, 0], [3, 1.26667, 0]], [-0.194775, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("LKneePitch")
        times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        keys.append([[0, [3, -1, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0.698132, [3, -0.666667, 0], [3, 0.666667, 0]], [-9.9341e-08, [3, -0.666667, 0], [3, 0.666667, 0]], [-9.9341e-08, [3, -0.666667, 0], [3, 0.666667, 0]], [1.39626, [3, -0.666667, 0], [3, 0.666667, 0]], [1.22173, [3, -0.666667, 0], [3, 0.666667, 0]], [2.0944, [3, -0.666667, 0], [3, 0.666667, 0]], [2.0944, [3, -0.666667, 0], [3, 0.666667, 0]], [2.0944, [3, -0.666667, 0], [3, 0.866667, 0]], [2.0944, [3, -0.866667, 0], [3, 0.866667, 0]], [2.0944, [3, -0.866667, 0], [3, 0.733333, 0]], [2.1101, [3, -0.733333, 0], [3, 0.666667, 0]], [1.74533, [3, -0.666667, 0.104429], [3, 0.666667, -0.104429]], [1.48353, [3, -0.666667, 0.261799], [3, 0.666667, -0.261799]], [0.122173, [3, -0.666667, 0], [3, 0.866667, 0]], [1.74533, [3, -0.866667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]], [1.74533, [3, -0.866667, 0], [3, 0.733333, 0]], [1.309, [3, -0.733333, 0], [3, 0.6, 0]], [2.0944, [3, -0.6, 0], [3, 1.26667, 0]], [-0.0890141, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("LShoulderPitch")
        times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        keys.append([[1.5708, [3, -1, 0], [3, 0.666667, 0]], [1.91986, [3, -0.666667, -0.0872665], [3, 0.666667, 0.0872665]], [2.0944, [3, -0.666667, 0], [3, 0.666667, 0]], [1.5708, [3, -0.666667, 0.349066], [3, 0.666667, -0.349066]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0.366519, [3, -0.666667, 0], [3, 0.666667, 0]], [0.349066, [3, -0.666667, 0.0174533], [3, 0.666667, -0.0174533]], [0.191986, [3, -0.666667, 0.15708], [3, 0.666667, -0.15708]], [-0.802851, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.174533, [3, -0.666667, 0], [3, 0.866667, 0]], [-0.296706, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.174533, [3, -0.866667, -0.122173], [3, 0.733333, 0.103377]], [0.523599, [3, -0.733333, 0], [3, 0.666667, 0]], [0.471239, [3, -0.666667, 0.0319977], [3, 0.666667, -0.0319977]], [0.331613, [3, -0.666667, 0.139626], [3, 0.666667, -0.139626]], [-0.471239, [3, -0.666667, 0], [3, 0.866667, 0]], [0.0698132, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.0698132, [3, -0.866667, 0], [3, 0.866667, 0]], [0.0698132, [3, -0.866667, -0.0724796], [3, 0.733333, 0.0613289]], [0.331613, [3, -0.733333, -0.261799], [3, 0.6, 0.214199]], [1.69297, [3, -0.6, 0], [3, 1.26667, 0]], [1.52936, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("LShoulderRoll")
        times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        keys.append([[0.174533, [3, -1, 0], [3, 0.666667, 0]], [0.349066, [3, -0.666667, 0], [3, 0.666667, 0]], [0.174533, [3, -0.666667, 0], [3, 0.666667, 0]], [0.174533, [3, -0.666667, 0], [3, 0.666667, 0]], [0.174533, [3, -0.666667, 0], [3, 0.666667, 0]], [0.698132, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0.0872665, [3, -0.666667, -0.0290888], [3, 0.666667, 0.0290888]], [0.174533, [3, -0.666667, -0.0523599], [3, 0.666667, 0.0523599]], [0.401426, [3, -0.666667, -0.14165], [3, 0.866667, 0.184145]], [1.15192, [3, -0.866667, 0], [3, 0.866667, 0]], [0.401426, [3, -0.866667, 0], [3, 0.733333, 0]], [0.401426, [3, -0.733333, 0], [3, 0.666667, 0]], [0.174533, [3, -0.666667, 0.0669043], [3, 0.666667, -0.0669043]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0.401426, [3, -0.666667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.733333, 0]], [0.20944, [3, -0.733333, -0.172788], [3, 0.6, 0.141372]], [0.942478, [3, -0.6, 0], [3, 1.26667, 0]], [0.107338, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("LWristYaw")
        times.append([3, 50])
        keys.append([[-1.53589, [3, -1, 0], [3, 15.6667, 0]], [0.139552, [3, -15.6667, 0], [3, 0, 0]]])

        names.append("RAnklePitch")
        times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        keys.append([[1.00403e-07, [3, -1, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.698132, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.174533, [3, -0.666667, -0.116355], [3, 0.666667, 0.116355]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [1.00403e-07, [3, -0.666667, -1.00403e-07], [3, 0.866667, 1.30524e-07]], [0.523599, [3, -0.866667, 0], [3, 0.866667, 0]], [1.00403e-07, [3, -0.866667, 0.228468], [3, 0.733333, -0.193319]], [-0.741765, [3, -0.733333, 0.14399], [3, 0.666667, -0.1309]], [-0.872665, [3, -0.666667, 0.0509054], [3, 0.666667, -0.0509054]], [-1.0472, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.0472, [3, -0.666667, 0], [3, 0.866667, 0]], [-1.0472, [3, -0.866667, 0], [3, 0.866667, 0]], [-1.0472, [3, -0.866667, 0], [3, 0.866667, 0]], [-1.0472, [3, -0.866667, 0], [3, 0.733333, 0]], [-1.0472, [3, -0.733333, 0], [3, 0.6, 0]], [-1.0472, [3, -0.6, 0], [3, 1.26667, 0]], [0.036858, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("RAnkleRoll")
        times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        keys.append([[-0.0523599, [3, -1, 0], [3, 0.666667, 0]], [0.1309, [3, -0.666667, -0.0817396], [3, 0.666667, 0.0817396]], [0.438078, [3, -0.666667, 0], [3, 0.666667, 0]], [0.10472, [3, -0.666667, 0], [3, 0.666667, 0]], [0.10472, [3, -0.666667, 0], [3, 0.666667, 0]], [0.294961, [3, -0.666667, -0.0861029], [3, 0.666667, 0.0861029]], [0.621337, [3, -0.666667, -0.0817396], [3, 0.666667, 0.0817396]], [0.785398, [3, -0.666667, 0], [3, 0.666667, 0]], [0.74351, [3, -0.666667, 0.0418879], [3, 0.666667, -0.0418879]], [0.436332, [3, -0.666667, 0.107755], [3, 0.866667, -0.140082]], [0, [3, -0.866667, 0], [3, 0.866667, 0]], [0.349066, [3, -0.866667, 0], [3, 0.733333, 0]], [0.261799, [3, -0.733333, 0.060948], [3, 0.666667, -0.0554073]], [0, [3, -0.666667, 0.0727221], [3, 0.666667, -0.0727221]], [-0.174533, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.174533, [3, -0.666667, 0], [3, 0.866667, 0]], [-0.0424667, [3, -0.866667, -0.0199111], [3, 0.866667, 0.0199111]], [-0.0225556, [3, -0.866667, -0.00490207], [3, 0.866667, 0.00490207]], [-0.0130542, [3, -0.866667, -0.00369954], [3, 0.733333, 0.00313038]], [-0.00206581, [3, -0.733333, -0.00239327], [3, 0.6, 0.00195813]], [0, [3, -0.6, -0.00206581], [3, 1.26667, 0.00436115]], [0.0291878, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("RElbowRoll")
        times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 45.4, 46.2, 50])
        keys.append([[0, [3, -1, 0], [3, 0.666667, 0]], [0.698132, [3, -0.666667, -0.174533], [3, 0.666667, 0.174533]], [1.0472, [3, -0.666667, 0], [3, 0.666667, 0]], [2.57424e-07, [3, -0.666667, 2.57424e-07], [3, 0.666667, -2.57424e-07]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [1.23918, [3, -0.666667, -0.273435], [3, 0.666667, 0.273435]], [1.64061, [3, -0.666667, 0], [3, 0.666667, 0]], [0.0698132, [3, -0.666667, 0], [3, 0.666667, 0]], [1.11701, [3, -0.666667, 0], [3, 0.666667, 0]], [0.855211, [3, -0.666667, 0], [3, 0.866667, 0]], [1.25664, [3, -0.866667, 0], [3, 0.866667, 0]], [0.855211, [3, -0.866667, 0], [3, 0.733333, 0]], [0.855211, [3, -0.733333, 0], [3, 0.666667, 0]], [0.890118, [3, -0.666667, -0.0261799], [3, 0.666667, 0.0261799]], [1.01229, [3, -0.666667, 0], [3, 0.666667, 0]], [1.01229, [3, -0.666667, 0], [3, 0.866667, 0]], [1.01229, [3, -0.866667, 0], [3, 0.866667, 0]], [0.0349066, [3, -0.866667, 0], [3, 0.866667, 0]], [1.01229, [3, -0.866667, 0], [3, 0.733333, 0]], [1.01229, [3, -0.733333, 0], [3, 0.333333, 0]], [1.13272, [3, -0.333333, -0.0656115], [3, 0.266667, 0.0524892]], [1.36659, [3, -0.266667, 0], [3, 1.26667, 0]], [0.395814, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("RElbowYaw")
        times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 45.4, 46.2, 50])
        keys.append([[1.5708, [3, -1, 0], [3, 0.666667, 0]], [1.5708, [3, -0.666667, 0], [3, 0.666667, 0]], [1.5708, [3, -0.666667, 0], [3, 0.666667, 0]], [1.5708, [3, -0.666667, 0], [3, 0.666667, 0]], [1.5708, [3, -0.666667, 0], [3, 0.666667, 0]], [0.191986, [3, -0.666667, 0], [3, 0.666667, 0]], [0.349066, [3, -0.666667, -0.15708], [3, 0.666667, 0.15708]], [1.5708, [3, -0.666667, 0], [3, 0.666667, 0]], [0.418879, [3, -0.666667, 0], [3, 0.666667, 0]], [0.418879, [3, -0.666667, 0], [3, 0.866667, 0]], [0.0872665, [3, -0.866667, 0], [3, 0.866667, 0]], [0.418879, [3, -0.866667, 0], [3, 0.733333, 0]], [-0.191986, [3, -0.733333, 0.0191986], [3, 0.666667, -0.0174533]], [-0.20944, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.733333, 0]], [0, [3, -0.733333, 0], [3, 0.333333, 0]], [0.342085, [3, -0.333333, 0], [3, 0.266667, 0]], [0.244346, [3, -0.266667, 0], [3, 1.26667, 0]], [1.15966, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("RHand")
        times.append([3, 50])
        keys.append([[0, [3, -1, 0], [3, 15.6667, 0]], [0.302, [3, -15.6667, 0], [3, 0, 0]]])

        names.append("RHipPitch")
        times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        keys.append([[0, [3, -1, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.698132, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.174533, [3, -0.666667, -0.0698132], [3, 0.666667, 0.0698132]], [-0.10472, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.122173, [3, -0.666667, 0.0174533], [3, 0.666667, -0.0174533]], [-0.872665, [3, -0.666667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.872665, [3, -0.866667, 0], [3, 0.733333, 0]], [-0.741765, [3, -0.733333, 0], [3, 0.666667, 0]], [-0.872665, [3, -0.666667, 0.0509054], [3, 0.666667, -0.0509054]], [-1.0472, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.0472, [3, -0.666667, 0], [3, 0.866667, 0]], [-1.0472, [3, -0.866667, 0], [3, 0.866667, 0]], [-1.0472, [3, -0.866667, 0], [3, 0.866667, 0]], [-1.0472, [3, -0.866667, 0], [3, 0.733333, 0]], [-1.0472, [3, -0.733333, 0], [3, 0.6, 0]], [-1.0472, [3, -0.6, 0], [3, 1.26667, 0]], [0.214717, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("RHipRoll")
        times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        keys.append([[0.0523599, [3, -1, 0], [3, 0.666667, 0]], [-0.122173, [3, -0.666667, 0.0817396], [3, 0.666667, -0.0817396]], [-0.438078, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.10472, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.10472, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.349066, [3, -0.666667, 0.113446], [3, 0.666667, -0.113446]], [-0.785398, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.541052, [3, -0.666667, -0.107629], [3, 0.666667, 0.107629]], [-0.139626, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.139626, [3, -0.666667, 0], [3, 0.866667, 0]], [-0.698132, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.139626, [3, -0.866667, -0.173321], [3, 0.733333, 0.146656]], [0.261799, [3, -0.733333, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0.101811], [3, 0.666667, -0.101811]], [-0.349066, [3, -0.666667, 0.0898845], [3, 0.666667, -0.0898845]], [-0.539307, [3, -0.666667, 0.0379419], [3, 0.866667, -0.0493245]], [-0.610865, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.610865, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.610865, [3, -0.866667, 0], [3, 0.733333, 0]], [-0.532325, [3, -0.733333, -0.0785398], [3, 0.6, 0.0642598]], [0, [3, -0.6, 0], [3, 1.26667, 0]], [-0.021434, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("RHipYawPitch")
        times.append([3, 5, 7, 9, 11, 13, 50])
        keys.append([[-0.10821, [3, -1, 0], [3, 0.666667, 0]], [-0.120428, [3, -0.666667, 0.00378155], [3, 0.666667, -0.00378155]], [-0.1309, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.120428, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.143117, [3, -0.666667, 0.00785398], [3, 0.666667, -0.00785398]], [-0.167552, [3, -0.666667, 0.000883047], [3, 12.3333, -0.0163364]], [-0.194775, [3, -12.3333, 0], [3, 0, 0]]])

        names.append("RKneePitch")
        times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        keys.append([[0, [3, -1, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [1.39626, [3, -0.666667, 0], [3, 0.666667, 0]], [0.349066, [3, -0.666667, 0.212348], [3, 0.666667, -0.212348]], [0.122173, [3, -0.666667, 0], [3, 0.666667, 0]], [0.122173, [3, -0.666667, 0], [3, 0.666667, 0]], [1.74533, [3, -0.666667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]], [1.74533, [3, -0.866667, 0], [3, 0.733333, 0]], [1.48353, [3, -0.733333, 0], [3, 0.666667, 0]], [1.74533, [3, -0.666667, -0.101811], [3, 0.666667, 0.101811]], [2.0944, [3, -0.666667, 0], [3, 0.666667, 0]], [2.0944, [3, -0.666667, 0], [3, 0.866667, 0]], [2.0944, [3, -0.866667, 0], [3, 0.866667, 0]], [2.0944, [3, -0.866667, 0], [3, 0.866667, 0]], [2.0944, [3, -0.866667, 0], [3, 0.733333, 0]], [2.0944, [3, -0.733333, 0], [3, 0.6, 0]], [2.0944, [3, -0.6, 0], [3, 1.26667, 0]], [-0.091998, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("RShoulderPitch")
        times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        keys.append([[1.5708, [3, -1, 0], [3, 0.666667, 0]], [1.91986, [3, -0.666667, -0.0872665], [3, 0.666667, 0.0872665]], [2.0944, [3, -0.666667, 0], [3, 0.666667, 0]], [1.5708, [3, -0.666667, 0.349066], [3, 0.666667, -0.349066]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0.174533, [3, -0.666667, -0.101811], [3, 0.666667, 0.101811]], [0.610865, [3, -0.666667, -0.145444], [3, 0.666667, 0.145444]], [1.0472, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.471239, [3, -0.666667, 0], [3, 0.666667, 0]], [0.0698132, [3, -0.666667, 0], [3, 0.866667, 0]], [-0.0698132, [3, -0.866667, 0], [3, 0.866667, 0]], [0.0698132, [3, -0.866667, -0.0724796], [3, 0.733333, 0.0613289]], [0.331613, [3, -0.733333, -0.0700902], [3, 0.666667, 0.0637184]], [0.471239, [3, -0.666667, -0.0319977], [3, 0.666667, 0.0319977]], [0.523599, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.802851, [3, -0.666667, 0], [3, 0.866667, 0]], [-0.174533, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.296706, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.174533, [3, -0.866667, -0.122173], [3, 0.733333, 0.103377]], [0.523599, [3, -0.733333, -0.342375], [3, 0.6, 0.280125]], [1.69297, [3, -0.6, 0], [3, 1.26667, 0]], [1.51563, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("RShoulderRoll")
        times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        keys.append([[-0.174533, [3, -1, 0], [3, 0.666667, 0]], [-0.174533, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.349066, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.174533, [3, -0.666667, -1.81594e-05], [3, 0.666667, 1.81594e-05]], [-0.174515, [3, -0.666667, -1.81594e-05], [3, 0.666667, 1.81594e-05]], [-0.0698132, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.837758, [3, -0.666667, 0.241437], [3, 0.666667, -0.241437]], [-1.51844, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.401426, [3, -0.666667, -0.253073], [3, 0.666667, 0.253073]], [0, [3, -0.666667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.733333, 0]], [0, [3, -0.733333, 0], [3, 0.666667, 0]], [-0.174533, [3, -0.666667, 0.0669043], [3, 0.666667, -0.0669043]], [-0.401426, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.174533, [3, -0.666667, 0], [3, 0.866667, 0]], [-0.401426, [3, -0.866667, 0.162897], [3, 0.866667, -0.162897]], [-1.15192, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.401426, [3, -0.866667, 0], [3, 0.733333, 0]], [-0.558505, [3, -0.733333, 0.0991929], [3, 0.6, -0.0811578]], [-0.942478, [3, -0.6, 0], [3, 1.26667, 0]], [-0.099752, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("RWristYaw")
        times.append([3, 50])
        keys.append([[1.53589, [3, -1, 0], [3, 15.6667, 0]], [0.164096, [3, -15.6667, 0], [3, 0, 0]]])

#animation code end

        self.names = names
        self.times = times
        self.keys = keys

        if p != None and len(p) > 0:
            self.soundId = self.player.loadFile(p)

    def onInput_onStart(self):
        self.bIsRunning = True
        import time

        self.startTime = time.time()
        if self.soundId != None:
            tid = self.player.post.play(self.soundId)

        self.onInput_onResume()

        if self.soundId != None:
            self.player.wait(tid, 0)

        self.bIsRunning = False
        self.onStopped()

    def onInput_onResume(self):
        adj_rate = 0.001

        initialDelayEstimate = len(self.times[0]) * adj_rate

        import time
        motion = ALProxy("ALMotion")

        times = list()
        keys = list()

        curTime = time.time() - self.startTime
        nextTime = curTime + 2.0

        for i in range(len(self.times)):
            times0 = list()
            keys0 = list()
            for j in range(len(self.times[i])):
                if self.times[i][j] > nextTime:
                    times.append(self.times[i][j:]) # This loop may take time. Re-calcualte the time later
                    keys.append(self.keys[i][j:])
                    break

        curTime = time.time() - self.startTime # get current time and re-calculate the time with this


        currentDelayEstimate = len(times[0]) * adj_rate
        adjTime = curTime - (initialDelayEstimate - currentDelayEstimate)

        l = len(times)
        for i in range(l):
            times[i] = [x- adjTime for x in times[i]]


        if len(keys) > 0:
            motion.angleInterpolationBezier(self.names, times, keys)

        #self.onStopped()


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onPrepare" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Input name="onResume" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="5" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                                            </Box>
                                            <Box name="Get Attached File" id="5" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="267" y="14">
                                                <bitmap>media/images/box/folder.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.framemanager = ALProxy("ALFrameManager")

    def onInput_onStart(self):
        self.onStopped(self.framemanager.getBehaviorPath(self.behaviorId) + self.getParameter("File name"))]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" />
                                                <Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" />
                                            </Box>
                                            <Box name="Set Fall Manager" id="7" localization="8" tooltip="Enable or disable the Fall Manager.&#x0A;&#x0A;It is automatically set to its previous state when the behavior is stopped." x="146" y="113">
                                                <bitmap>media/images/box/sensors/fall_manager.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.bFallManagerEnabled = True

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        self.motion.setFallManagerEnabled(self.bFallManagerEnabled)

    def onInput_onSet(self):
        self.bFallManagerEnabled = self.motion.getFallManagerEnabled()
        enable = (self.getParameter("Action") == "Enable")
        self.motion.setFallManagerEnabled(enable)
        self.onDone()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Action" inherits_from_parent="0" content_type="3" value="Enable" default_value="Enable" custom_choice="0" tooltip="Choose if you want to enable or disable the fall manager executing this box." id="4">
                                                    <Choice value="Disable" />
                                                    <Choice value="Enable" />
                                                </Parameter>
                                            </Box>
                                            <Box name="Only Once" id="4" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="148" y="215">
                                                <bitmap>media/images/box/loop.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onSignal" type="1" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                <Output name="firstTime" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                            </Box>
                                            <Box name="Only Once (1)" id="8" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="146" y="15">
                                                <bitmap>media/images/box/loop.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onSignal" type="1" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                <Output name="firstTime" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                            </Box>
                                            <Box name="fall recovery" id="10" localization="8" tooltip="Enter description here" x="150" y="318">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="Wait_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                                                <Output name="StandUp_success" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="122" y="167">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="WakeUp" id="2" localization="0" tooltip="Call a Wake Up process.&#x0A;Stiff all joints and apply stand Init posture if the robot is Stand" x="262" y="174">
                                                                    <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        self.motion.wakeUp()
        self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Resource name="All motors" type="Lock" timeout="0" />
                                                                    <Resource name="Stiffness" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Stand Up" id="3" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="402" y="172">
                                                                    <bitmap>media/images/box/movement/stand.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                                                                    <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                                                                    <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="StandUpBehavior">
                                                                            <BehaviorKeyframe name="DetectRobotPose" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureProxy.setMaxTryNumber(self.nTries)

        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                                                                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                                                                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                                                                            <Choice value="Crouch" />
                                                                                            <Choice value="LyingBack" />
                                                                                            <Choice value="LyingBelly" />
                                                                                            <Choice value="Sit" />
                                                                                            <Choice value="SitRelax" />
                                                                                            <Choice value="StandInit" />
                                                                                            <Choice value="Stand" />
                                                                                            <Choice value="StandZero" />
                                                                                        </Parameter>
                                                                                        <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                                                                        <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                                                                        <Resource name="All motors" type="Lock" timeout="0" />
                                                                                        <Resource name="Stiffness" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                    <Resource name="All motors" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Set Speaker Vol." id="1" localization="8" tooltip="Set the sound volume between 0 (mute) and 100 (max).&#x0A;&#x0A;V1.1.0&#x0A;" x="122" y="44">
                                                                    <bitmap>media/images/box/interaction/processing_sound.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.audiodevice = ALProxy("ALAudioDevice")
        self.volume = self.audiodevice.getOutputVolume()

    def onUnload(self):
        self.audiodevice.setOutputVolume(self.volume)


    def onInput_onSet(self):
        self.audiodevice.setOutputVolume(self.volume * .8)
        self.onReady() # activate output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onSet" type="1" type_size="1" nature="2" inner="0" tooltip="The data is set when a signal is received on this input." id="2" />
                                                                    <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" />
                                                                    <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="50" default_value="50" min="0" max="100" tooltip="Percentage of maximum output volume." id="4" />
                                                                </Box>
                                                                <Link inputowner="2" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="3" indexofoutput="5" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="3" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="6" />
                                            <Link inputowner="1" indexofinput="4" outputowner="10" indexofoutput="3" />
                                            <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="3" />
                                            <Link inputowner="0" indexofinput="7" outputowner="1" indexofoutput="6" />
                                            <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="3" />
                                            <Link inputowner="1" indexofinput="3" outputowner="4" indexofoutput="3" />
                                            <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="5" indexofinput="2" outputowner="8" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="WakeUp" id="2" localization="0" tooltip="Call a Wake Up process.&#x0A;Stiff all joints and apply stand Init posture if the robot is Stand" x="70" y="149">
                            <bitmap>media/images/box/movement/stiffness.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        self.motion.wakeUp()
        self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Resource name="All motors" type="Lock" timeout="0" />
                            <Resource name="Stiffness" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Stand Up" id="1" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="198" y="152">
                            <bitmap>media/images/box/movement/stand.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                            <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                            <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="StandUpBehavior">
                                    <BehaviorKeyframe name="DetectRobotPose" index="1">
                                        <Diagram>
                                            <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureProxy.setMaxTryNumber(self.nTries)

        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                                <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                                <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                                    <Choice value="Crouch" />
                                                    <Choice value="LyingBack" />
                                                    <Choice value="LyingBelly" />
                                                    <Choice value="Sit" />
                                                    <Choice value="SitRelax" />
                                                    <Choice value="StandInit" />
                                                    <Choice value="Stand" />
                                                    <Choice value="StandZero" />
                                                </Parameter>
                                                <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                                <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                                <Resource name="All motors" type="Lock" timeout="0" />
                                                <Resource name="Stiffness" type="Lock" timeout="0" />
                                            </Box>
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="All motors" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Tactile Head" id="5" localization="8" tooltip="Detect touch on head tactile sensor." x="319" y="150">
                            <bitmap>media/images/box/sensors/tactileHead.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                            <Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                            <Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" />
                            <Output name="frontTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The front tactile head sensor was touched." id="8" />
                            <Output name="middleTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The middle tactile head sensor was touched." id="9" />
                            <Output name="rearTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The rear tactile head sensor was touched." id="10" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="If &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="260" y="17">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="256" y="119">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="If &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="261" y="223">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="8" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" />
                                            <Link inputowner="0" indexofinput="9" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" />
                                            <Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Head-sequence" type="Lock" timeout="0" />
                        </Box>
                        <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                        <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="3" indexofinput="3" outputowner="5" indexofoutput="9" />
                        <Link inputowner="5" indexofinput="2" outputowner="1" indexofoutput="4" />
                        <Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="7" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
